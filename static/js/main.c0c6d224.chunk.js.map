{"version":3,"sources":["location.js","displayWeather.js","navbar.js","footer.js","weatherPicture.js","App.js","serviceWorker.js","index.js"],"names":["Location","_ref","apiCall","handleChange","longitude","latitude","console","log","react_default","a","createElement","Fragment","className","htmlFor","onChange","name","value","type","WeatherDisplay","props","timeZone","weatherUpdate","temperature","Navbar","src","Footer","alt","WeatherPicture","secret","require","axios","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","bind","assertThisInitialized","event","setState","defineProperty","target","_this2","key","weatherKey","SecretKey","get","concat","then","response","data","daily","summary","timezone","currently","navbar","src_location","onClick","displayWeather","weatherPicture","footer","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c0c6d224.chunk.js","sourcesContent":["import React from 'react';\n\n\nconst Location = ({apiCall, handleChange, longitude, latitude}) => {\nconsole.log(handleChange)\nreturn(\n\n  <>\n\n    <form >\n    <div className=\"formInput1\">\n      <label htmlFor=\"longitude\">Please enter a longitude</label>\n        <input onChange={handleChange} name=\"longitude\" value={longitude} type=\"text\" />\n    </div>\n\n    <div className=\"formInput2\">\n      <label htmlFor = \"latitude\">Please enter a Latitude</label>\n        <input onChange={handleChange} name=\"latitude\" value={latitude} type=\"text\" />\n    </div>\n        </form>\n\n  </>\n)\n}\n\n\n\n\nexport default Location;\n","import React from 'react'\n\n\nconst WeatherDisplay = (props) => {\n\nreturn(\n  <>\n  {props.timeZone ?\n    <div>\n    <table className=\"tableData\">\n    <tr>\n      <th>Region</th>\n      <th>Weather Status</th>\n      <th>Temperature</th>\n    </tr>\n    <tr>\n    <td>{props.timeZone}</td>\n    <td>{props.weatherUpdate}</td>\n    <td>{props.temperature}</td>\n    </tr>\n    </table>\n\n  </div>:null}\n\n\n  </>\n)\n\n}\n\n\n\nexport default WeatherDisplay;\n// <p>Region</p>\n//\n// <p className=\"timeZone\">{props.timeZone}</p>\n//\n// <p>Weather Status</p>\n// <p className=\"weatherUpdate\">{props.weatherUpdate}</p>\n//\n// <p>Temperature</p>\n// <p className=\"temperature\">{props.temperature} F</p>\n\n\n// {props.temperature > 65 ?\n//  <img className=\"simpsons\"src=\"https://media1.tenor.com/images/e5b6969646a123835a953458f40c0947/tenor.gif?itemid=11294547\"/>: <img className=\"simpsons\" src=\"https://frinkiac.com/video/S07E06/OWOF3Gkf5RPjjb5nN6TsnfCtqc4=.gif\"/> }\n","import React from 'react';\n\n\n\nconst Navbar = (props) => {\n\nreturn(\n  <>\n  <div className=\"navcloud\">\n  <h1 className=\"navbar\">Weather App</h1>\n<img className=\"cloudAnime\" src=\"https://i.gifer.com/X5Na.gif\" />\n</div>\n  </>\n)\n\n}\n\n\nexport default Navbar;\n","import React from 'react'\n\nconst Footer = (props) => {\n\nreturn(\n  <>\n  <div className=\"theFooter\">\n    <ul>\n      <li>Pursuit School Project</li>\n      <li>5.1 Full Stack web days</li>\n      <li>Created by Jon.e</li>\n    </ul>\n  <img className=\"moogle\" src=\"https://66.media.tumblr.com/0e90b634fa8533558a660a092dc88343/tumblr_oo3nm2yevm1w83qhyo1_500.gif\" alt=\"\"/>\n  </div>\n  </>\n)\n\n}\n\nexport default Footer\n","import React from \"react\";\n\nconst WeatherPicture = props => {\n  if (props.temperature && props.temperature > 65) {\n    return (\n      <>\n        <img\n          className=\"simpsons\"\n          src=\"https://media1.tenor.com/images/e5b6969646a123835a953458f40c0947/tenor.gif?itemid=11294547\" alt=\"\"\n        />\n      </>\n    )\n  }else if(props.temperature && props.temperature < 65 && props.temperature > 1){\n    return(\n      <>\n      <img className=\"simpsons\" src=\"https://frinkiac.com/video/S07E06/OWOF3Gkf5RPjjb5nN6TsnfCtqc4=.gif\" alt=\"\"/>\n      </>\n    )\n  }\n};\n\nexport default WeatherPicture;\n","import React, { Component } from \"react\";\nimport Location from './location.js'\nimport WeatherDisplay from './displayWeather.js'\nimport Navbar from './navbar.js'\nimport Footer from './footer.js'\nimport WeatherPicture from './weatherPicture.js';\nimport \"./App.css\";\nconst secret = require(\"./secret.json\");\nconst axios = require(\"axios\");\n// const cors = require('cors');\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      weatherUpdate: \"\",\n      longitude: \"\",\n      latitude: \"\",\n      timeZone: \"\",\n      temperature: null\n    };\n    this.handleChange = this.handleChange.bind(this)\n    this.apiCall = this.apiCall.bind(this)\n  }\n\n  handleChange(event){\n    this.setState({\n    [event.target.name]: event.target.value\n    })\n  }\n// -71.0589\n// 42.3601\n\n  apiCall() {\n    const key = secret.weatherKey[0].SecretKey;\n    // let data;\n    axios\n      .get(\n        ` https://cors-anywhere.herokuapp.com/https://api.darksky.net/forecast/${key}/${this.state.longitude},${this.state.latitude}`\n      )\n      .then(response => {\n\n        let data = response.data.daily.summary\n        this.setState({\n          weatherUpdate: data,\n          timeZone: response.data.timezone,\n          temperature: response.data.currently.temperature,\n          longitude: \"\",\n          latitude: \"\"\n\n\n        });\n      });\n  }\n\n  render() {\n    // console.log(secret.weatherKey[0].SecretKey, \"this\");\n    // console.log(this.state.weatherUpdate,\"this\")\n    console.log(this.state)\n    return (\n      <div className=\"App\">\n        <Navbar />\n\n\n        <br />\n        <Location apiCall={this.apiCall}\n          handleChange={this.handleChange}\n          longitude={this.state.longitude}\n          latitude={this.state.latitude}/>\n\n        <button className=\"weatherButton\" name=\"weatherUpdate\" value={this.state.weatherUpdate} onClick={this.apiCall}>click for weather update</button>\n\n        <WeatherDisplay\n          weatherUpdate={this.state.weatherUpdate}\n           timeZone={this.state.timeZone}\n           temperature={this.state.temperature}\n           />\n\n         {this.state.temperature ?\n         <WeatherPicture\n           temperature={this.state.temperature}/>\n         : null }\n\n         <Footer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n\n// onClick={(event) => { func1(); func2();}}\n// response.header(\"Access-Control-Allow-Origin\", \"*\");\n\n  //\n  // <button name=\"weatherUpdate\" value={this.state.weatherUpdate} onClick={this.apiCall}>click</button>\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}